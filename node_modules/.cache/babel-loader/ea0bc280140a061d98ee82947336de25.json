{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\react\\\\web-portfolio\\\\src\\\\components\\\\Pagination\\\\Pagination.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\nlet paginationItem = (page, onPageChange, active) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    key: \"pagination\" + page,\n    className: classnames({\n      active: active\n    }, \"paginationItem\"),\n    onClick: () => onPageChange(page),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, page);\n};\n\nlet paginationItemList = (pagerPage, pagerCount, currentPage, onPageChange, totalPage) => {\n  let start = pagerCount * pagerPage - (pagerCount - 1);\n  let end = pagerCount * pagerPage;\n  let paginationItemList = [];\n\n  for (let i = start; i <= end; i++) {\n    if (i <= totalPage) {\n      paginationItemList.push(paginationItem(i, onPageChange, i === currentPage));\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"paginationItemList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 10\n    }\n  }, paginationItemList);\n};\n\nclass Pagination extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.propsToState = this.propsToState.bind(this);\n    this.prevNext = this.prevNext.bind(this);\n    this.onPageChange = this.onPageChange.bind(this);\n  }\n\n  componentWillMount() {\n    this.propsToState(this.props);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.propsToState(nextProps);\n  }\n\n  propsToState(props) {\n    this.setState({ ...props,\n      totalPage: Math.ceil(props.total / props.rowCount),\n      pagerPage: Math.ceil(props.currentPage / props.pagerCount)\n    });\n  }\n\n  onPageChange(page) {\n    this.props.onPageChange(page);\n  }\n\n  prevNext(type) {\n    let pagerPage = this.state.pagerPage;\n\n    switch (type) {\n      case \"prev\":\n        pagerPage -= 1;\n        break;\n\n      case \"next\":\n        pagerPage += 1;\n        break;\n    }\n\n    let page = this.state.pagerCount * (pagerPage - 1) + 1;\n    this.onPageChange(page);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pagination\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      //   style={this.state.pagerPage > 1 ? {} : { display: \"none\" }}\n      className: \"pagination-prev\",\n      onClick: this.state.pagerPage > 1 ? () => this.prevNext(\"prev\") : {},\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, \"<\"), paginationItemList(this.state.pagerPage, this.state.pagerCount, this.state.currentPage, this.onPageChange, this.state.totalPage), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pagination-next\",\n      onClick: this.state.pagerPage < Math.ceil(this.state.totalPage / this.state.pagerCount) ? () => this.prevNext(\"next\") : {},\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, \">\"));\n  }\n\n}\n\nPagination.propTypes = {\n  currentPage: PropTypes.number,\n  pagerCount: PropTypes.number,\n  onPageChange: PropTypes.func.isRequired,\n  total: PropTypes.number.isRequired,\n  rowCount: PropTypes.number.isRequired\n};\nPagination.defaultProps = {\n  currentPage: 1,\n  pagerCount: 5\n};\nexport default Pagination;","map":{"version":3,"sources":["C:/workspace/react/web-portfolio/src/components/Pagination/Pagination.js"],"names":["React","Component","PropTypes","classnames","paginationItem","page","onPageChange","active","paginationItemList","pagerPage","pagerCount","currentPage","totalPage","start","end","i","push","Pagination","constructor","props","state","propsToState","bind","prevNext","componentWillMount","componentWillReceiveProps","nextProps","setState","Math","ceil","total","rowCount","type","render","propTypes","number","func","isRequired","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classnames from \"classnames\";\r\n\r\nlet paginationItem = (page, onPageChange, active) => {\r\n  return (\r\n    <div\r\n      key={\"pagination\" + page}\r\n      className={classnames({ active: active }, \"paginationItem\")}\r\n      onClick={() => onPageChange(page)}\r\n    >\r\n      {page}\r\n    </div>\r\n  );\r\n};\r\n\r\nlet paginationItemList = (\r\n  pagerPage,\r\n  pagerCount,\r\n  currentPage,\r\n  onPageChange,\r\n  totalPage\r\n) => {\r\n  let start = pagerCount * pagerPage - (pagerCount - 1);\r\n  let end = pagerCount * pagerPage;\r\n  let paginationItemList = [];\r\n\r\n  for (let i = start; i <= end; i++) {\r\n    if (i <= totalPage) {\r\n      paginationItemList.push(\r\n        paginationItem(i, onPageChange, i === currentPage)\r\n      );\r\n    }\r\n  }\r\n\r\n  return <div className=\"paginationItemList\">{paginationItemList}</div>;\r\n};\r\n\r\nclass Pagination extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.propsToState = this.propsToState.bind(this);\r\n    this.prevNext = this.prevNext.bind(this);\r\n    this.onPageChange = this.onPageChange.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.propsToState(this.props);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    this.propsToState(nextProps);\r\n  }\r\n\r\n  propsToState(props) {\r\n    this.setState({\r\n      ...props,\r\n      totalPage: Math.ceil(props.total / props.rowCount),\r\n      pagerPage: Math.ceil(props.currentPage / props.pagerCount),\r\n    });\r\n  }\r\n\r\n  onPageChange(page) {\r\n    this.props.onPageChange(page);\r\n  }\r\n\r\n  prevNext(type) {\r\n    let pagerPage = this.state.pagerPage;\r\n    switch (type) {\r\n      case \"prev\":\r\n        pagerPage -= 1;\r\n        break;\r\n      case \"next\":\r\n        pagerPage += 1;\r\n        break;\r\n    }\r\n    let page = this.state.pagerCount * (pagerPage - 1) + 1;\r\n    this.onPageChange(page);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"pagination\">\r\n        <div\r\n          //   style={this.state.pagerPage > 1 ? {} : { display: \"none\" }}\r\n          className=\"pagination-prev\"\r\n          onClick={this.state.pagerPage > 1 ? () => this.prevNext(\"prev\") : {}}\r\n        >\r\n          {\"<\"}\r\n        </div>\r\n\r\n        {paginationItemList(\r\n          this.state.pagerPage,\r\n          this.state.pagerCount,\r\n          this.state.currentPage,\r\n          this.onPageChange,\r\n          this.state.totalPage\r\n        )}\r\n        <div\r\n          className=\"pagination-next\"\r\n          onClick={\r\n            this.state.pagerPage <\r\n            Math.ceil(this.state.totalPage / this.state.pagerCount)\r\n              ? () => this.prevNext(\"next\")\r\n              : {}\r\n          }\r\n        >\r\n          {\">\"}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nPagination.propTypes = {\r\n  currentPage: PropTypes.number,\r\n  pagerCount: PropTypes.number,\r\n  onPageChange: PropTypes.func.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\nPagination.defaultProps = {\r\n  currentPage: 1,\r\n  pagerCount: 5,\r\n};\r\n\r\nexport default Pagination;\r\n"]},"metadata":{},"sourceType":"module"}