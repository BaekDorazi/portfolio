{"ast":null,"code":"/*\nCopyright (c) 2016 Daybrush\nname: react-scenejs\nlicense: MIT\nauthor: Daybrush\nrepository: https://github.com/daybrush/scenejs/tree/master/packages/react-scenejs\nversion: 1.1.0\n*/\nimport NativeScene, { OPTIONS, EVENTS, SceneItem as SceneItem$1 } from 'scenejs';\nimport { findDOMNode } from 'react-dom';\nimport { PureComponent } from 'react';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar SceneInterface = /*#__PURE__*/function (_super) {\n  __extends(SceneInterface, _super);\n\n  function SceneInterface() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      ready: false\n    };\n    _this.events = {\n      play: function (e) {\n        return _this.props.onPlay(e);\n      },\n      paused: function (e) {\n        return _this.props.onPaused(e);\n      },\n      ended: function (e) {\n        return _this.props.onEnded(e);\n      },\n      timeupdate: function (e) {\n        return _this.props.onTimeUpdate(e);\n      },\n      iteration: function (e) {\n        return _this.props.onIteration(e);\n      },\n      animate: function (e) {\n        return _this.props.onAnimate(e);\n      }\n    };\n    return _this;\n  }\n\n  var __proto = SceneInterface.prototype;\n\n  __proto.render = function () {\n    return this.props.children;\n  };\n\n  __proto.componentDidUpdate = function () {\n    if (this.props.ready && !this.state.ready) {\n      this.init();\n    }\n\n    if (this.props.time !== -1 && (this.props.autoplay === false || this.item.getPlayState() === \"paused\")) {\n      this.item.setTime(this.props.time);\n    }\n  };\n\n  __proto.componentWillUnmount = function () {\n    this.item.off();\n  };\n\n  __proto.setTime = function (time) {\n    this.item.setTime(time);\n  };\n\n  __proto.getTime = function () {\n    return this.item.getTime();\n  };\n\n  __proto.play = function () {\n    this.props.css !== false ? this.item.playCSS() : this.item.play();\n  };\n\n  __proto.pause = function () {\n    this.item.pause();\n  };\n\n  __proto.isPaused = function () {\n    return this.item.isPaused();\n  };\n\n  __proto.getItem = function () {\n    return this.item;\n  };\n\n  __proto.getDuration = function () {\n    return this.item.getDuration();\n  };\n\n  __proto.init = function () {\n    var _this = this;\n\n    var state = this.state;\n\n    if (!this.props.ready || state.ready) {\n      return;\n    }\n\n    state.ready = true;\n    var item = this.item;\n    var events = this.events;\n    var sceneOptions = {};\n\n    if (this.props.keyframes) {\n      this.item.load(this.props.keyframes);\n    }\n\n    OPTIONS.forEach(function (name) {\n      sceneOptions[name] = _this.props[name];\n    });\n    item.setOptions(sceneOptions);\n    EVENTS.forEach(function (name) {\n      _this.item.on(name, events[name]);\n    });\n\n    if (this.props.autoplay !== false) {\n      this.play();\n    } else if (this.props.time !== -1) {\n      this.setTime(this.props.time);\n    } else {\n      this.setTime(0);\n    }\n  };\n\n  SceneInterface.defaultProps = {\n    duration: 0,\n    fillMode: \"forwards\",\n    direction: \"normal\",\n    playSpeed: 1,\n    iterationCount: 1,\n    delay: 0,\n    easing: 0,\n    time: -1,\n    css: false,\n    autoplay: false,\n    ready: true,\n    onPlay: function () {\n      return undefined;\n    },\n    onPaused: function () {\n      return undefined;\n    },\n    onEnded: function () {\n      return undefined;\n    },\n    onTimeUpdate: function () {\n      return undefined;\n    },\n    onIteration: function () {\n      return undefined;\n    },\n    onAnimate: function () {\n      return undefined;\n    }\n  };\n  return SceneInterface;\n}(PureComponent);\n\nvar SceneItem = /*#__PURE__*/function (_super) {\n  __extends(SceneItem, _super);\n\n  function SceneItem() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.item = new SceneItem$1();\n    return _this;\n  }\n\n  var __proto = SceneItem.prototype;\n\n  __proto.render = function () {\n    return this.props.children;\n  };\n\n  __proto.componentDidMount = function () {\n    this.item.setElement(findDOMNode(this));\n    this.init();\n  };\n\n  return SceneItem;\n}(SceneInterface);\n\nvar Scene = /*#__PURE__*/function (_super) {\n  __extends(Scene, _super);\n\n  function Scene() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.item = new NativeScene({}, {\n      selector: true\n    });\n    return _this;\n  }\n\n  var __proto = Scene.prototype;\n\n  __proto.render = function () {\n    return this.props.children;\n  };\n\n  __proto.componentDidMount = function () {\n    this.init();\n  };\n\n  return Scene;\n}(SceneInterface);\n\nexport { Scene, SceneItem };","map":{"version":3,"sources":["../src/react-scenejs/SceneInterface.tsx","../src/react-scenejs/SceneItem.tsx","../src/react-scenejs/Scene.tsx"],"names":["tslib_1","SceneInterface","duration","fillMode","direction","playSpeed","iterationCount","delay","easing","time","css","autoplay","ready","onPlay","undefined","onPaused","onEnded","onTimeUpdate","onIteration","onAnimate","_this","play","paused","ended","timeupdate","iteration","animate","state","item","events","sceneOptions","OPTIONS","EVENTS","findDOMNode","selector"],"mappings":"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","sourcesContent":["import { PureComponent } from \"react\";\nimport Scene, { OPTIONS, EVENTS, SceneItem, AnimatorState } from \"scenejs\";\nimport { IObject } from \"@daybrush/utils\";\nimport { ScenePropTypes } from \"./types\";\n\nexport class SceneInterface<T extends Scene | SceneItem> extends PureComponent<ScenePropTypes, { ready: boolean }> {\n  public static defaultProps: ScenePropTypes = {\n    duration: 0,\n    fillMode: \"forwards\",\n    direction: \"normal\",\n    playSpeed: 1,\n    iterationCount: 1,\n    delay: 0,\n    easing: 0,\n    time: -1,\n    css: false,\n    autoplay: false,\n    ready: true,\n    onPlay: () => undefined,\n    onPaused: () => undefined,\n    onEnded: () => undefined,\n    onTimeUpdate: () => undefined,\n    onIteration: () => undefined,\n    onAnimate: () => undefined,\n  };\n  public state = { ready: false };\n  protected item!: T;\n  protected events: IObject<any> = {\n    play: (e: any) => this.props.onPlay!(e),\n    paused: (e: any) => this.props.onPaused!(e),\n    ended: (e: any) => this.props.onEnded!(e),\n    timeupdate: (e: any) => this.props.onTimeUpdate!(e),\n    iteration: (e: any) => this.props.onIteration!(e),\n    animate: (e: any) => this.props.onAnimate!(e),\n  };\n  public render() {\n    return this.props.children;\n  }\n  public componentDidUpdate() {\n    if (this.props.ready && !this.state.ready) {\n      this.init();\n    }\n    if (this.props.time !== -1 && (this.props.autoplay === false || this.item.getPlayState() === \"paused\")) {\n      this.item.setTime(this.props.time!);\n    }\n  }\n  public componentWillUnmount() {\n    this.item.off();\n  }\n  public setTime(time: number | string) {\n    this.item.setTime(time);\n  }\n  public getTime() {\n    return this.item.getTime();\n  }\n  public play() {\n    this.props.css !== false ? this.item.playCSS() : this.item.play();\n  }\n  public pause() {\n    this.item.pause();\n  }\n  public isPaused() {\n    return this.item.isPaused();\n  }\n  public getItem() {\n    return this.item;\n  }\n  public getDuration() {\n    return this.item.getDuration();\n  }\n  protected init() {\n    const state = this.state;\n    if (!this.props.ready || state.ready) {\n      return;\n    }\n    state.ready = true;\n    const item = this.item;\n    const events = this.events;\n    const sceneOptions: Partial<AnimatorState> = {};\n\n    if (this.props.keyframes) {\n      this.item.load(this.props.keyframes);\n    }\n    OPTIONS.forEach(name => {\n      sceneOptions[name] = this.props[name] as any;\n    });\n    (item as any).setOptions(sceneOptions);\n    EVENTS.forEach(name => {\n      this.item.on(name, events[name]);\n    });\n    if (this.props.autoplay !== false) {\n      this.play();\n    } else if (this.props.time !== -1) {\n      this.setTime(this.props.time!);\n    } else {\n      this.setTime(0);\n    }\n  }\n}\n","import { SceneItem as NativeSceneItem } from 'scenejs';\nimport { findDOMNode } from 'react-dom';\nimport { SceneInterface } from './SceneInterface';\n\n\nexport class SceneItem extends SceneInterface<NativeSceneItem> {\n  protected item: NativeSceneItem = new NativeSceneItem();\n  public render() {\n    return this.props.children;\n  }\n  public componentDidMount() {\n    this.item.setElement(findDOMNode(this) as HTMLElement);\n    this.init();\n  }\n}\n","import NativeScene from \"scenejs\";\nimport { SceneInterface } from \"./SceneInterface\";\n\nexport class Scene extends SceneInterface<NativeScene> {\n  protected item: NativeScene = new NativeScene({}, { selector: true });\n  public render() {\n    return this.props.children;\n  }\n  public componentDidMount() {\n    this.init();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}