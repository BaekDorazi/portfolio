{"ast":null,"code":"import _classCallCheck from\"C:\\\\workspace\\\\react\\\\web-portfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\workspace\\\\react\\\\web-portfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _createSuper from\"C:\\\\workspace\\\\react\\\\web-portfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import _inherits from\"C:\\\\workspace\\\\react\\\\web-portfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import{Circle,Line}from\"rc-progress\";var SkillProgress=/*#__PURE__*/function(_Component){_inherits(SkillProgress,_Component);var _super=_createSuper(SkillProgress);function SkillProgress(props){var _this;_classCallCheck(this,SkillProgress);_this=_super.call(this,props);_this.increase=function(){var percent=_this.state.percent;var percentVal=_this.props.percentVal;var newPercent=percent+1;//percent 값을 1씩 증가시켜 저장해놓는 변수\nif(newPercent>=percentVal+1){clearTimeout(_this.tm);//timer를 clear함\nreturn;}_this.setState({percent:newPercent});_this.tm=setTimeout(_this.increase,50);//0.05초 마다 호출\n};_this.state={isPageFocus:false,//페이지가 포커스 되었을 때 true\npercent:0//progress 값\n};return _this;}_createClass(SkillProgress,[{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps,prevState){var isPageFocus=this.props.isPageFocus;//Career 페이지가 띄워지고 state의 isPageFocus 값이 false 일때\n//Career 페이지가 띄워져을때\nif(!prevState.isPageFocus&&isPageFocus){this.increase();this.setState({isPageFocus:isPageFocus});}//Career에서 다른 페이지로 이동했을때 나머지 값들 초기화\nif(prevState.isPageFocus&&!isPageFocus){this.setState({isPageFocus:false,percent:0});}}//progressbar 값 증가시키는 메소드\n},{key:\"render\",value:function render(){var percent=this.state.percent;var _this$props=this.props,color=_this$props.color,contents=_this$props.contents;var containerStyle={width:\"400px\"};return/*#__PURE__*/React.createElement(\"div\",{className:\"skill-progress-container\",style:containerStyle},/*#__PURE__*/React.createElement(Line,{percent:percent,strokeWidth:\"4\",strokeColor:color}));}}]);return SkillProgress;}(Component);export default SkillProgress;","map":{"version":3,"sources":["C:/workspace/react/web-portfolio/src/components/SkillProgress/SkillProgress.js"],"names":["React","Component","Circle","Line","SkillProgress","props","increase","percent","state","percentVal","newPercent","clearTimeout","tm","setState","setTimeout","isPageFocus","prevProps","prevState","color","contents","containerStyle","width"],"mappings":"4mBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,MAAT,CAAiBC,IAAjB,KAA6B,aAA7B,C,GAEMC,CAAAA,a,8GACJ,uBAAYC,KAAZ,CAAmB,+CACjB,uBAAMA,KAAN,EADiB,MA+BnBC,QA/BmB,CA+BR,UAAM,IACPC,CAAAA,OADO,CACK,MAAKC,KADV,CACPD,OADO,IAEPE,CAAAA,UAFO,CAEQ,MAAKJ,KAFb,CAEPI,UAFO,CAGf,GAAMC,CAAAA,UAAU,CAAGH,OAAO,CAAG,CAA7B,CAAgC;AAEhC,GAAIG,UAAU,EAAID,UAAU,CAAG,CAA/B,CAAkC,CAChCE,YAAY,CAAC,MAAKC,EAAN,CAAZ,CAAuB;AACvB,OACD,CACD,MAAKC,QAAL,CAAc,CAAEN,OAAO,CAAEG,UAAX,CAAd,EACA,MAAKE,EAAL,CAAUE,UAAU,CAAC,MAAKR,QAAN,CAAgB,EAAhB,CAApB,CAAyC;AAC1C,CA1CkB,CAGjB,MAAKE,KAAL,CAAa,CACXO,WAAW,CAAE,KADF,CACS;AACpBR,OAAO,CAAE,CAAG;AAFD,CAAb,CAHiB,aAOlB,C,wFAEkBS,S,CAAWC,S,CAAW,IAC/BF,CAAAA,WAD+B,CACf,KAAKV,KADU,CAC/BU,WAD+B,CAGvC;AACA;AACA,GAAI,CAACE,SAAS,CAACF,WAAX,EAA0BA,WAA9B,CAA2C,CACzC,KAAKT,QAAL,GACA,KAAKO,QAAL,CAAc,CACZE,WAAW,CAAEA,WADD,CAAd,EAGD,CAED;AACA,GAAIE,SAAS,CAACF,WAAV,EAAyB,CAACA,WAA9B,CAA2C,CACzC,KAAKF,QAAL,CAAc,CACZE,WAAW,CAAE,KADD,CAEZR,OAAO,CAAE,CAFG,CAAd,EAID,CACF,CAED;uCAcS,IACCA,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,iBAEqB,KAAKF,KAF1B,CAECa,KAFD,aAECA,KAFD,CAEQC,QAFR,aAEQA,QAFR,CAIP,GAAMC,CAAAA,cAAc,CAAG,CACrBC,KAAK,CAAE,OADc,CAAvB,CAIA,mBACE,2BAAK,SAAS,CAAC,0BAAf,CAA0C,KAAK,CAAED,cAAjD,eACE,oBAAC,IAAD,EAAM,OAAO,CAAEb,OAAf,CAAwB,WAAW,CAAC,GAApC,CAAwC,WAAW,CAAEW,KAArD,EADF,CADF,CAKD,C,2BA1DyBjB,S,EA6D5B,cAAeG,CAAAA,aAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Circle, Line } from \"rc-progress\";\r\n\r\nclass SkillProgress extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isPageFocus: false, //페이지가 포커스 되었을 때 true\r\n      percent: 0, //progress 값\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { isPageFocus } = this.props;\r\n\r\n    //Career 페이지가 띄워지고 state의 isPageFocus 값이 false 일때\r\n    //Career 페이지가 띄워져을때\r\n    if (!prevState.isPageFocus && isPageFocus) {\r\n      this.increase();\r\n      this.setState({\r\n        isPageFocus: isPageFocus,\r\n      });\r\n    }\r\n\r\n    //Career에서 다른 페이지로 이동했을때 나머지 값들 초기화\r\n    if (prevState.isPageFocus && !isPageFocus) {\r\n      this.setState({\r\n        isPageFocus: false,\r\n        percent: 0,\r\n      });\r\n    }\r\n  }\r\n\r\n  //progressbar 값 증가시키는 메소드\r\n  increase = () => {\r\n    const { percent } = this.state;\r\n    const { percentVal } = this.props;\r\n    const newPercent = percent + 1; //percent 값을 1씩 증가시켜 저장해놓는 변수\r\n\r\n    if (newPercent >= percentVal + 1) {\r\n      clearTimeout(this.tm); //timer를 clear함\r\n      return;\r\n    }\r\n    this.setState({ percent: newPercent });\r\n    this.tm = setTimeout(this.increase, 50); //0.05초 마다 호출\r\n  };\r\n\r\n  render() {\r\n    const { percent } = this.state;\r\n    const { color, contents } = this.props;\r\n\r\n    const containerStyle = {\r\n      width: \"400px\",\r\n    };\r\n\r\n    return (\r\n      <div className=\"skill-progress-container\" style={containerStyle}>\r\n        <Line percent={percent} strokeWidth=\"4\" strokeColor={color} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SkillProgress;\r\n"]},"metadata":{},"sourceType":"module"}