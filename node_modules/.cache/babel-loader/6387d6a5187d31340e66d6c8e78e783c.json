{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction stringifiable(obj) {\n  // Safely stringify Object.create(null)\n\n  /* istanbul ignore next */\n  return typeof obj === 'object' && !('toString' in obj) ? Object.prototype.toString.call(obj).slice(8, -1) : obj;\n}\n\nvar isProduction = typeof process === 'object' && process.env.NODE_ENV === 'production';\n\nfunction invariant(condition, message) {\n  if (!condition) {\n    /* istanbul ignore next */\n    if (isProduction) {\n      throw new Error('Invariant failed');\n    }\n\n    throw new Error(message());\n  }\n}\n\nexports.invariant = invariant;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar splice = Array.prototype.splice;\nvar toString = Object.prototype.toString;\n\nfunction type(obj) {\n  return toString.call(obj).slice(8, -1);\n}\n\nvar assign = Object.assign ||\n/* istanbul ignore next */\nfunction (target, source) {\n  getAllKeys(source).forEach(function (key) {\n    if (hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  });\n  return target;\n};\n\nvar getAllKeys = typeof Object.getOwnPropertySymbols === 'function' ? function (obj) {\n  return Object.keys(obj).concat(Object.getOwnPropertySymbols(obj));\n}\n/* istanbul ignore next */\n: function (obj) {\n  return Object.keys(obj);\n};\n\nfunction copy(object) {\n  return Array.isArray(object) ? assign(object.constructor(object.length), object) : type(object) === 'Map' ? new Map(object) : type(object) === 'Set' ? new Set(object) : object && typeof object === 'object' ? assign(Object.create(Object.getPrototypeOf(object)), object)\n  /* istanbul ignore next */\n  : object;\n}\n\nvar Context =\n/** @class */\nfunction () {\n  function Context() {\n    this.commands = assign({}, defaultCommands);\n    this.update = this.update.bind(this); // Deprecated: update.extend, update.isEquals and update.newContext\n\n    this.update.extend = this.extend = this.extend.bind(this);\n\n    this.update.isEquals = function (x, y) {\n      return x === y;\n    };\n\n    this.update.newContext = function () {\n      return new Context().update;\n    };\n  }\n\n  Object.defineProperty(Context.prototype, \"isEquals\", {\n    get: function () {\n      return this.update.isEquals;\n    },\n    set: function (value) {\n      this.update.isEquals = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Context.prototype.extend = function (directive, fn) {\n    this.commands[directive] = fn;\n  };\n\n  Context.prototype.update = function (object, $spec) {\n    var _this = this;\n\n    var spec = typeof $spec === 'function' ? {\n      $apply: $spec\n    } : $spec;\n\n    if (!(Array.isArray(object) && Array.isArray(spec))) {\n      invariant(!Array.isArray(spec), function () {\n        return \"update(): You provided an invalid spec to update(). The spec may \" + \"not contain an array except as the value of $set, $push, $unshift, \" + \"$splice or any custom command allowing an array value.\";\n      });\n    }\n\n    invariant(typeof spec === 'object' && spec !== null, function () {\n      return \"update(): You provided an invalid spec to update(). The spec and \" + \"every included key path must be plain objects containing one of the \" + (\"following commands: \" + Object.keys(_this.commands).join(', ') + \".\");\n    });\n    var nextObject = object;\n    getAllKeys(spec).forEach(function (key) {\n      if (hasOwnProperty.call(_this.commands, key)) {\n        var objectWasNextObject = object === nextObject;\n        nextObject = _this.commands[key](spec[key], nextObject, spec, object);\n\n        if (objectWasNextObject && _this.isEquals(nextObject, object)) {\n          nextObject = object;\n        }\n      } else {\n        var nextValueForKey = type(object) === 'Map' ? _this.update(object.get(key), spec[key]) : _this.update(object[key], spec[key]);\n        var nextObjectValue = type(nextObject) === 'Map' ? nextObject.get(key) : nextObject[key];\n\n        if (!_this.isEquals(nextValueForKey, nextObjectValue) || typeof nextValueForKey === 'undefined' && !hasOwnProperty.call(object, key)) {\n          if (nextObject === object) {\n            nextObject = copy(object);\n          }\n\n          if (type(nextObject) === 'Map') {\n            nextObject.set(key, nextValueForKey);\n          } else {\n            nextObject[key] = nextValueForKey;\n          }\n        }\n      }\n    });\n    return nextObject;\n  };\n\n  return Context;\n}();\n\nexports.Context = Context;\nvar defaultCommands = {\n  $push: function (value, nextObject, spec) {\n    invariantPushAndUnshift(nextObject, spec, '$push');\n    return value.length ? nextObject.concat(value) : nextObject;\n  },\n  $unshift: function (value, nextObject, spec) {\n    invariantPushAndUnshift(nextObject, spec, '$unshift');\n    return value.length ? value.concat(nextObject) : nextObject;\n  },\n  $splice: function (value, nextObject, spec, originalObject) {\n    invariantSplices(nextObject, spec);\n    value.forEach(function (args) {\n      invariantSplice(args);\n\n      if (nextObject === originalObject && args.length) {\n        nextObject = copy(originalObject);\n      }\n\n      splice.apply(nextObject, args);\n    });\n    return nextObject;\n  },\n  $set: function (value, _nextObject, spec) {\n    invariantSet(spec);\n    return value;\n  },\n  $toggle: function (targets, nextObject) {\n    invariantSpecArray(targets, '$toggle');\n    var nextObjectCopy = targets.length ? copy(nextObject) : nextObject;\n    targets.forEach(function (target) {\n      nextObjectCopy[target] = !nextObject[target];\n    });\n    return nextObjectCopy;\n  },\n  $unset: function (value, nextObject, _spec, originalObject) {\n    invariantSpecArray(value, '$unset');\n    value.forEach(function (key) {\n      if (Object.hasOwnProperty.call(nextObject, key)) {\n        if (nextObject === originalObject) {\n          nextObject = copy(originalObject);\n        }\n\n        delete nextObject[key];\n      }\n    });\n    return nextObject;\n  },\n  $add: function (values, nextObject, _spec, originalObject) {\n    invariantMapOrSet(nextObject, '$add');\n    invariantSpecArray(values, '$add');\n\n    if (type(nextObject) === 'Map') {\n      values.forEach(function (_a) {\n        var key = _a[0],\n            value = _a[1];\n\n        if (nextObject === originalObject && nextObject.get(key) !== value) {\n          nextObject = copy(originalObject);\n        }\n\n        nextObject.set(key, value);\n      });\n    } else {\n      values.forEach(function (value) {\n        if (nextObject === originalObject && !nextObject.has(value)) {\n          nextObject = copy(originalObject);\n        }\n\n        nextObject.add(value);\n      });\n    }\n\n    return nextObject;\n  },\n  $remove: function (value, nextObject, _spec, originalObject) {\n    invariantMapOrSet(nextObject, '$remove');\n    invariantSpecArray(value, '$remove');\n    value.forEach(function (key) {\n      if (nextObject === originalObject && nextObject.has(key)) {\n        nextObject = copy(originalObject);\n      }\n\n      nextObject.delete(key);\n    });\n    return nextObject;\n  },\n  $merge: function (value, nextObject, _spec, originalObject) {\n    invariantMerge(nextObject, value);\n    getAllKeys(value).forEach(function (key) {\n      if (value[key] !== nextObject[key]) {\n        if (nextObject === originalObject) {\n          nextObject = copy(originalObject);\n        }\n\n        nextObject[key] = value[key];\n      }\n    });\n    return nextObject;\n  },\n  $apply: function (value, original) {\n    invariantApply(value);\n    return value(original);\n  }\n};\nvar defaultContext = new Context();\nexports.isEquals = defaultContext.update.isEquals;\nexports.extend = defaultContext.extend;\nexports.default = defaultContext.update; // @ts-ignore\n\nexports.default.default = module.exports = assign(exports.default, exports); // invariants\n\nfunction invariantPushAndUnshift(value, spec, command) {\n  invariant(Array.isArray(value), function () {\n    return \"update(): expected target of \" + stringifiable(command) + \" to be an array; got \" + stringifiable(value) + \".\";\n  });\n  invariantSpecArray(spec[command], command);\n}\n\nfunction invariantSpecArray(spec, command) {\n  invariant(Array.isArray(spec), function () {\n    return \"update(): expected spec of \" + stringifiable(command) + \" to be an array; got \" + stringifiable(spec) + \". \" + \"Did you forget to wrap your parameter in an array?\";\n  });\n}\n\nfunction invariantSplices(value, spec) {\n  invariant(Array.isArray(value), function () {\n    return \"Expected $splice target to be an array; got \" + stringifiable(value);\n  });\n  invariantSplice(spec.$splice);\n}\n\nfunction invariantSplice(value) {\n  invariant(Array.isArray(value), function () {\n    return \"update(): expected spec of $splice to be an array of arrays; got \" + stringifiable(value) + \". \" + \"Did you forget to wrap your parameters in an array?\";\n  });\n}\n\nfunction invariantApply(fn) {\n  invariant(typeof fn === 'function', function () {\n    return \"update(): expected spec of $apply to be a function; got \" + stringifiable(fn) + \".\";\n  });\n}\n\nfunction invariantSet(spec) {\n  invariant(Object.keys(spec).length === 1, function () {\n    return \"Cannot have more than one key in an object with $set\";\n  });\n}\n\nfunction invariantMerge(target, specValue) {\n  invariant(specValue && typeof specValue === 'object', function () {\n    return \"update(): $merge expects a spec of type 'object'; got \" + stringifiable(specValue);\n  });\n  invariant(target && typeof target === 'object', function () {\n    return \"update(): $merge expects a target of type 'object'; got \" + stringifiable(target);\n  });\n}\n\nfunction invariantMapOrSet(target, command) {\n  var typeOfTarget = type(target);\n  invariant(typeOfTarget === 'Map' || typeOfTarget === 'Set', function () {\n    return \"update(): \" + stringifiable(command) + \" expects a target of type Set or Map; got \" + stringifiable(typeOfTarget);\n  });\n}","map":{"version":3,"sources":["C:/workspace/react/web-portfolio/node_modules/immutability-helper/index.js"],"names":["Object","defineProperty","exports","value","stringifiable","obj","prototype","toString","call","slice","isProduction","process","env","NODE_ENV","invariant","condition","message","Error","hasOwnProperty","splice","Array","type","assign","target","source","getAllKeys","forEach","key","getOwnPropertySymbols","keys","concat","copy","object","isArray","constructor","length","Map","Set","create","getPrototypeOf","Context","commands","defaultCommands","update","bind","extend","isEquals","x","y","newContext","get","set","enumerable","configurable","directive","fn","$spec","_this","spec","$apply","join","nextObject","objectWasNextObject","nextValueForKey","nextObjectValue","$push","invariantPushAndUnshift","$unshift","$splice","originalObject","invariantSplices","args","invariantSplice","apply","$set","_nextObject","invariantSet","$toggle","targets","invariantSpecArray","nextObjectCopy","$unset","_spec","$add","values","invariantMapOrSet","_a","has","add","$remove","delete","$merge","invariantMerge","original","invariantApply","defaultContext","default","module","command","specValue","typeOfTarget"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction stringifiable(obj) {\r\n    // Safely stringify Object.create(null)\r\n    /* istanbul ignore next */\r\n    return typeof obj === 'object' && !('toString' in obj) ?\r\n        Object.prototype.toString.call(obj).slice(8, -1) :\r\n        obj;\r\n}\r\nvar isProduction = typeof process === 'object' && process.env.NODE_ENV === 'production';\r\nfunction invariant(condition, message) {\r\n    if (!condition) {\r\n        /* istanbul ignore next */\r\n        if (isProduction) {\r\n            throw new Error('Invariant failed');\r\n        }\r\n        throw new Error(message());\r\n    }\r\n}\r\nexports.invariant = invariant;\r\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\nvar splice = Array.prototype.splice;\r\nvar toString = Object.prototype.toString;\r\nfunction type(obj) {\r\n    return toString.call(obj).slice(8, -1);\r\n}\r\nvar assign = Object.assign || /* istanbul ignore next */ (function (target, source) {\r\n    getAllKeys(source).forEach(function (key) {\r\n        if (hasOwnProperty.call(source, key)) {\r\n            target[key] = source[key];\r\n        }\r\n    });\r\n    return target;\r\n});\r\nvar getAllKeys = typeof Object.getOwnPropertySymbols === 'function'\r\n    ? function (obj) { return Object.keys(obj).concat(Object.getOwnPropertySymbols(obj)); }\r\n    /* istanbul ignore next */\r\n    : function (obj) { return Object.keys(obj); };\r\nfunction copy(object) {\r\n    return Array.isArray(object)\r\n        ? assign(object.constructor(object.length), object)\r\n        : (type(object) === 'Map')\r\n            ? new Map(object)\r\n            : (type(object) === 'Set')\r\n                ? new Set(object)\r\n                : (object && typeof object === 'object')\r\n                    ? assign(Object.create(Object.getPrototypeOf(object)), object)\r\n                    /* istanbul ignore next */\r\n                    : object;\r\n}\r\nvar Context = /** @class */ (function () {\r\n    function Context() {\r\n        this.commands = assign({}, defaultCommands);\r\n        this.update = this.update.bind(this);\r\n        // Deprecated: update.extend, update.isEquals and update.newContext\r\n        this.update.extend = this.extend = this.extend.bind(this);\r\n        this.update.isEquals = function (x, y) { return x === y; };\r\n        this.update.newContext = function () { return new Context().update; };\r\n    }\r\n    Object.defineProperty(Context.prototype, \"isEquals\", {\r\n        get: function () {\r\n            return this.update.isEquals;\r\n        },\r\n        set: function (value) {\r\n            this.update.isEquals = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Context.prototype.extend = function (directive, fn) {\r\n        this.commands[directive] = fn;\r\n    };\r\n    Context.prototype.update = function (object, $spec) {\r\n        var _this = this;\r\n        var spec = (typeof $spec === 'function') ? { $apply: $spec } : $spec;\r\n        if (!(Array.isArray(object) && Array.isArray(spec))) {\r\n            invariant(!Array.isArray(spec), function () { return \"update(): You provided an invalid spec to update(). The spec may \" +\r\n                \"not contain an array except as the value of $set, $push, $unshift, \" +\r\n                \"$splice or any custom command allowing an array value.\"; });\r\n        }\r\n        invariant(typeof spec === 'object' && spec !== null, function () { return \"update(): You provided an invalid spec to update(). The spec and \" +\r\n            \"every included key path must be plain objects containing one of the \" +\r\n            (\"following commands: \" + Object.keys(_this.commands).join(', ') + \".\"); });\r\n        var nextObject = object;\r\n        getAllKeys(spec).forEach(function (key) {\r\n            if (hasOwnProperty.call(_this.commands, key)) {\r\n                var objectWasNextObject = object === nextObject;\r\n                nextObject = _this.commands[key](spec[key], nextObject, spec, object);\r\n                if (objectWasNextObject && _this.isEquals(nextObject, object)) {\r\n                    nextObject = object;\r\n                }\r\n            }\r\n            else {\r\n                var nextValueForKey = type(object) === 'Map'\r\n                    ? _this.update(object.get(key), spec[key])\r\n                    : _this.update(object[key], spec[key]);\r\n                var nextObjectValue = type(nextObject) === 'Map'\r\n                    ? nextObject.get(key)\r\n                    : nextObject[key];\r\n                if (!_this.isEquals(nextValueForKey, nextObjectValue)\r\n                    || typeof nextValueForKey === 'undefined'\r\n                        && !hasOwnProperty.call(object, key)) {\r\n                    if (nextObject === object) {\r\n                        nextObject = copy(object);\r\n                    }\r\n                    if (type(nextObject) === 'Map') {\r\n                        nextObject.set(key, nextValueForKey);\r\n                    }\r\n                    else {\r\n                        nextObject[key] = nextValueForKey;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return nextObject;\r\n    };\r\n    return Context;\r\n}());\r\nexports.Context = Context;\r\nvar defaultCommands = {\r\n    $push: function (value, nextObject, spec) {\r\n        invariantPushAndUnshift(nextObject, spec, '$push');\r\n        return value.length ? nextObject.concat(value) : nextObject;\r\n    },\r\n    $unshift: function (value, nextObject, spec) {\r\n        invariantPushAndUnshift(nextObject, spec, '$unshift');\r\n        return value.length ? value.concat(nextObject) : nextObject;\r\n    },\r\n    $splice: function (value, nextObject, spec, originalObject) {\r\n        invariantSplices(nextObject, spec);\r\n        value.forEach(function (args) {\r\n            invariantSplice(args);\r\n            if (nextObject === originalObject && args.length) {\r\n                nextObject = copy(originalObject);\r\n            }\r\n            splice.apply(nextObject, args);\r\n        });\r\n        return nextObject;\r\n    },\r\n    $set: function (value, _nextObject, spec) {\r\n        invariantSet(spec);\r\n        return value;\r\n    },\r\n    $toggle: function (targets, nextObject) {\r\n        invariantSpecArray(targets, '$toggle');\r\n        var nextObjectCopy = targets.length ? copy(nextObject) : nextObject;\r\n        targets.forEach(function (target) {\r\n            nextObjectCopy[target] = !nextObject[target];\r\n        });\r\n        return nextObjectCopy;\r\n    },\r\n    $unset: function (value, nextObject, _spec, originalObject) {\r\n        invariantSpecArray(value, '$unset');\r\n        value.forEach(function (key) {\r\n            if (Object.hasOwnProperty.call(nextObject, key)) {\r\n                if (nextObject === originalObject) {\r\n                    nextObject = copy(originalObject);\r\n                }\r\n                delete nextObject[key];\r\n            }\r\n        });\r\n        return nextObject;\r\n    },\r\n    $add: function (values, nextObject, _spec, originalObject) {\r\n        invariantMapOrSet(nextObject, '$add');\r\n        invariantSpecArray(values, '$add');\r\n        if (type(nextObject) === 'Map') {\r\n            values.forEach(function (_a) {\r\n                var key = _a[0], value = _a[1];\r\n                if (nextObject === originalObject && nextObject.get(key) !== value) {\r\n                    nextObject = copy(originalObject);\r\n                }\r\n                nextObject.set(key, value);\r\n            });\r\n        }\r\n        else {\r\n            values.forEach(function (value) {\r\n                if (nextObject === originalObject && !nextObject.has(value)) {\r\n                    nextObject = copy(originalObject);\r\n                }\r\n                nextObject.add(value);\r\n            });\r\n        }\r\n        return nextObject;\r\n    },\r\n    $remove: function (value, nextObject, _spec, originalObject) {\r\n        invariantMapOrSet(nextObject, '$remove');\r\n        invariantSpecArray(value, '$remove');\r\n        value.forEach(function (key) {\r\n            if (nextObject === originalObject && nextObject.has(key)) {\r\n                nextObject = copy(originalObject);\r\n            }\r\n            nextObject.delete(key);\r\n        });\r\n        return nextObject;\r\n    },\r\n    $merge: function (value, nextObject, _spec, originalObject) {\r\n        invariantMerge(nextObject, value);\r\n        getAllKeys(value).forEach(function (key) {\r\n            if (value[key] !== nextObject[key]) {\r\n                if (nextObject === originalObject) {\r\n                    nextObject = copy(originalObject);\r\n                }\r\n                nextObject[key] = value[key];\r\n            }\r\n        });\r\n        return nextObject;\r\n    },\r\n    $apply: function (value, original) {\r\n        invariantApply(value);\r\n        return value(original);\r\n    },\r\n};\r\nvar defaultContext = new Context();\r\nexports.isEquals = defaultContext.update.isEquals;\r\nexports.extend = defaultContext.extend;\r\nexports.default = defaultContext.update;\r\n// @ts-ignore\r\nexports.default.default = module.exports = assign(exports.default, exports);\r\n// invariants\r\nfunction invariantPushAndUnshift(value, spec, command) {\r\n    invariant(Array.isArray(value), function () { return \"update(): expected target of \" + stringifiable(command) + \" to be an array; got \" + stringifiable(value) + \".\"; });\r\n    invariantSpecArray(spec[command], command);\r\n}\r\nfunction invariantSpecArray(spec, command) {\r\n    invariant(Array.isArray(spec), function () { return \"update(): expected spec of \" + stringifiable(command) + \" to be an array; got \" + stringifiable(spec) + \". \" +\r\n        \"Did you forget to wrap your parameter in an array?\"; });\r\n}\r\nfunction invariantSplices(value, spec) {\r\n    invariant(Array.isArray(value), function () { return \"Expected $splice target to be an array; got \" + stringifiable(value); });\r\n    invariantSplice(spec.$splice);\r\n}\r\nfunction invariantSplice(value) {\r\n    invariant(Array.isArray(value), function () { return \"update(): expected spec of $splice to be an array of arrays; got \" + stringifiable(value) + \". \" +\r\n        \"Did you forget to wrap your parameters in an array?\"; });\r\n}\r\nfunction invariantApply(fn) {\r\n    invariant(typeof fn === 'function', function () { return \"update(): expected spec of $apply to be a function; got \" + stringifiable(fn) + \".\"; });\r\n}\r\nfunction invariantSet(spec) {\r\n    invariant(Object.keys(spec).length === 1, function () { return \"Cannot have more than one key in an object with $set\"; });\r\n}\r\nfunction invariantMerge(target, specValue) {\r\n    invariant(specValue && typeof specValue === 'object', function () { return \"update(): $merge expects a spec of type 'object'; got \" + stringifiable(specValue); });\r\n    invariant(target && typeof target === 'object', function () { return \"update(): $merge expects a target of type 'object'; got \" + stringifiable(target); });\r\n}\r\nfunction invariantMapOrSet(target, command) {\r\n    var typeOfTarget = type(target);\r\n    invariant(typeOfTarget === 'Map' || typeOfTarget === 'Set', function () { return \"update(): \" + stringifiable(command) + \" expects a target of type Set or Map; got \" + stringifiable(typeOfTarget); });\r\n}\r\n"]},"metadata":{},"sourceType":"script"}